/*
 * AudioStreamer.c
 *
 *  Created on: Feb 19, 2018
 *      Author: ericksong
 */
#include "AudioStreamer.h"

sai_edma_handle_t txHandle = {0};
edma_handle_t dmaTxHandle = {0};
sai_edma_handle_t rxHandle = {0};
edma_handle_t dmaRxHandle = {0};

static void txCallback(I2S_Type *base, sai_edma_handle_t *handle, status_t status, void *userData)
{
    sai_transfer_t xfer = {0};

    sendCount++;
    if (sendCount == beginCount)
    {
        istxFinished = true;
        SAI_TransferTerminateSendEDMA(base, handle);
        sendCount = 0;
    }
    else
    {
        if (!sdcard)
        {
            xfer.data = audioBuff + ((sendCount - 1U) % BUFFER_NUM) * BUFFER_SIZE;
            xfer.dataSize = BUFFER_SIZE;
            SAI_TransferSendEDMA(base, handle, &xfer);
        }
    }
}

static void rxCallback(I2S_Type *base, sai_edma_handle_t *handle, status_t status, void *userData)
{
    sai_transfer_t xfer = {0};

    receiveCount++;

    if (receiveCount == beginCount)
    {
        isrxFinished = true;
        SAI_TransferTerminateReceiveEDMA(base, handle);
        receiveCount = 0;
    }
    else
    {
        if (!sdcard)
        {
            xfer.data = audioBuff + ((receiveCount - 1U) % BUFFER_NUM) * BUFFER_SIZE;
            xfer.dataSize = BUFFER_SIZE;
            SAI_TransferReceiveEDMA(base, handle, &xfer);
        }
    }
}

void Init_Dialog7212(void){
    sai_config_t config;
    uint32_t mclkSourceClockHz = 0U;
    edma_config_t dmaConfig = {0};

    i2c_master_config_t i2cConfig = {0};
    uint32_t i2cSourceClock;


    EDMA_GetDefaultConfig(&dmaConfig);
    EDMA_Init(MIC_DMA, &dmaConfig);
    EDMA_CreateHandle(&dmaTxHandle, MIC_DMA, Dialog_TX_SOURCE);
    EDMA_CreateHandle(&dmaRxHandle, MIC_DMA, Dialog_RX_CHANNEL);

    DMAMUX_Init(MIC_DMAMUX);
    DMAMUX_SetSource(MIC_DMAMUX, Dialog_TX_SOURCE, (uint8_t)Dialog_TX_SOURCE);
    DMAMUX_EnableChannel(MIC_DMAMUX, Dialog_TX_SOURCE);
    DMAMUX_SetSource(MIC_DMAMUX, Dialog_RX_CHANNEL, (uint8_t)Dialog_RX_SOURCE);
    DMAMUX_EnableChannel(MIC_DMAMUX, Dialog_RX_CHANNEL);

    /* Init SAI module */
    /*
     * config.masterSlave = kSAI_Master;
     * config.mclkSource = kSAI_MclkSourceSysclk;
     * config.protocol = kSAI_BusLeftJustified;
     * config.syncMode = kSAI_ModeAsync;
     * config.mclkOutputEnable = true;
     */
    SAI_TxGetDefaultConfig(&config);
    SAI_TxInit(DEMO_SAI, &config);

    /* Initialize SAI Rx */
    SAI_RxGetDefaultConfig(&config);
    SAI_RxInit(DEMO_SAI, &config);

    /* Configure the audio format */
	format.bitWidth = kSAI_WordWidth16bits;
	format.channel = 0U;
	format.sampleRate_Hz = SAMPLE_RATE;

	format.masterClockHz = OVER_SAMPLE_RATE * format.sampleRate_Hz;

	format.protocol = config.protocol;
	format.stereo = kSAI_Stereo;

	format.watermark = FSL_FEATURE_SAI_FIFO_COUNT / 2U;


	/* Configure Sgtl5000 I2C */
	codecHandle.base = Dialog_I2C;
	codecHandle.i2cHandle = &i2cHandle;
	i2cSourceClock = I2C_CLK_FREQ;

	/*
	 * i2cConfig.baudRate_Bps = 100000U;
	 * i2cConfig.enableStopHold = false;
	 * i2cConfig.glitchFilterWidth = 0U;
	 * i2cConfig.enableMaster = true;
	 */
	I2C_MasterGetDefaultConfig(&i2cConfig);
	I2C_MasterInit(Dialog_I2C, &i2cConfig, i2cSourceClock);
	I2C_MasterTransferCreateHandle(Dialog_I2C, &i2cHandle, NULL, NULL);

	DA7212_Init(&codecHandle, NULL);
	DA7212_ConfigAudioFormat(&codecHandle, format.sampleRate_Hz, format.masterClockHz, format.bitWidth);
	DA7212_ChangeOutput(&codecHandle, kDA7212_Output_HP);

	SAI_TransferTxCreateHandleEDMA(Dialog_SAI, &txHandle, txCallback, NULL, &dmaTxHandle);
	SAI_TransferRxCreateHandleEDMA(Dialog_SAI, &rxHandle, rxCallback, NULL, &dmaRxHandle);

	mclkSourceClockHz = Dialog_CLK_FREQ;
	SAI_TransferTxSetFormatEDMA(Dialog_SAI, &txHandle, &format, mclkSourceClockHz, format.masterClockHz);
	SAI_TransferRxSetFormatEDMA(Dialog_SAI, &rxHandle, &format, mclkSourceClockHz, format.masterClockHz);

	/* Enable interrupt to handle FIFO error */
	SAI_TxEnableInterrupts(Dialog_SAI, kSAI_FIFOErrorInterruptEnable);
	SAI_RxEnableInterrupts(Dialog_SAI, kSAI_FIFOErrorInterruptEnable);
	EnableIRQ(Dialog_TX_IRQ);
	EnableIRQ(Dialog_RX_IRQ);

}
